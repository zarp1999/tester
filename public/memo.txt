# CityJSON 3D ビューア

CityJSON形式の管路データを3次元で可視化するWebアプリケーションです。

## 機能

### 1. 3次元表示
- CityJSON形式の多様なジオメトリタイプに対応
  - Point, Sphere, Circle
  - Cylinder, Cone
  - Box, Cube, Rectangle
  - Torus, LineString, Arc, Spline など
- 無限地表面（シェーダーベース）
- リアルタイムSky & Sun レンダリング
- シャドウとライティング効果

### 2. 付帯情報表示
- オブジェクトをクリックで詳細情報を表示
- pipe_kind（管路種別）
- ジオメトリタイプと座標情報
- depth（深度）などの属性情報

### 3. カメラ操作
- キーボード操作（W/S/A/D/Q/E）
- マウス右ドラッグで視点回転
- 多彩なカメラプリセット（Y/P/O/L/I/T/R/U/J/H/G/K）
- リアルタイムカメラ位置表示

### 4. 環境表示
- Three.js Sky with Sun（GUIコントロール付き）
- turbidity, rayleigh, mie係数など調整可能
- 無限地表面（lightgrey）

## 技術スタック

- **React 18**: UIフレームワーク
- **Three.js**: 3Dレンダリングエンジン（純粋なThree.jsライブラリを直接使用）
- **JavaScript**: プログラミング言語

## プロジェクト構成

```
cityjson-3d-viewer/
├── public/
│   ├── index.html
│   ├── Cityjson_sample.json      # CityJSON管路データ
│   └── layer_panel.json          # レイヤー設定
├── src/
│   ├── components/
│   │   ├── Scene3D.js            # メイン3Dシーン
│   │   ├── Scene3D.css
│   │   ├── SkyComponent.js       # Sky & Sun レンダリング
│   │   ├── InfiniteGridHelper.js # 無限地表面
│   │   ├── PipelineInfoDisplay.js # 管路情報表示
│   │   └── PipelineInfoDisplay.css
│   │   ├── InfoPanel.css
│   │   ├── LayerControl.js       # レイヤー制御パネル
│   │   ├── LayerControl.css
│   │   ├── CameraControl.js      # カメラ制御パネル
│   │   └── CameraControl.css
│   ├── App.js                    # メインアプリケーション
│   ├── App.css
│   ├── index.js                  # エントリーポイント
│   └── index.css
├── package.json
└── README.md
```

## セットアップと実行

### 1. 依存関係のインストール

```bash
npm install
```

### 2. 開発サーバーの起動

```bash
npm start
```

ブラウザが自動的に開き、`http://localhost:3000` でアプリケーションが表示されます。

### 3. ビルド（本番環境用）

```bash
npm run build
```

`build/` ディレクトリに最適化されたファイルが生成されます。

## データ形式

### CityJSON形式（Cityjson_sample.json）

```json
{
  "type": "CityJSON",
  "version": "1.1",
  "objects": [
    {
      "id": "pipe_001",
      "type": "cylinder",
      "position": [0, 0, 0],
      "rotation": [0, 0, 0],
      "scale": [1, 10, 1],
      "color": "#2196F3",
      "attributes": {
        "name": "水道管A",
        "material": "鋼管",
        "diameter": 300,
        "length": 10,
        "installDate": "2020-04-15"
      }
    }
  ]
}
```

### サポートされる図形タイプ
- `cylinder`: 円筒形（管路）
- `sphere`: 球形（接続点）
- `box`: 直方体（制御ボックス）

## 将来の拡張予定

### REST API連携
現在はローカルJSONファイルからデータを読み込んでいますが、将来的には以下の機能を実装予定：

1. カメラ移動時にREST APIを呼び出し
2. 視点範囲内の管路データを動的に取得
3. レイヤー切り替え時のデータフィルタリング
4. リアルタイムデータ更新

### API仕様（計画中）

```javascript
// カメラ位置からデータを取得
GET /api/objects?x={x}&y={y}&z={z}&radius={radius}&layers={layer1,layer2}

// 特定オブジェクトの詳細を取得
GET /api/objects/{objectId}

// カメラ位置を保存
POST /api/user-positions
```

## 使用方法

1. **3D表示の操作**
   - 左クリック + ドラッグ: カメラ回転
   - マウスホイール: ズームイン/アウト
   - 右クリック + ドラッグ: カメラ平行移動

2. **オブジェクトの選択**
   - オブジェクトにマウスオーバーするとハイライト表示
   - クリックすると右側に詳細情報パネルが表示

3. **レイヤー制御**
   - 左側のレイヤーパネルでレイヤーのON/OFF切り替え
   - 各レイヤーの色を確認可能

4. **カメラ位置**
   - 右上のカメラパネルから保存済みの視点を選択
   - クイックに特定の視点へ移動可能

## トラブルシューティング

### 画面が真っ白になる場合
- ブラウザのコンソールでエラーを確認
- `npm install` を再実行して依存関係を再インストール

### 3Dが表示されない場合
- WebGLがブラウザでサポートされているか確認
- ハードウェアアクセラレーションが有効か確認

### データが読み込まれない場合
- `public/` フォルダ内にJSONファイルが存在するか確認
- ブラウザの開発者ツールのNetworkタブでファイルの読み込み状況を確認

## ライセンス

このプロジェクトはMITライセンスの下で公開されています。

## Three.js実装の詳細

このプロジェクトは**純粋なThree.jsライブラリ**を直接使用して実装されています。

### Scene3D.jsの主要な実装

1. **シーンの初期化**
   ```javascript
   const scene = new THREE.Scene();
   const camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);
   const renderer = new THREE.WebGLRenderer({ antialias: true });
   ```

2. **OrbitControlsの使用**
   ```javascript
   import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
   const controls = new OrbitControls(camera, renderer.domElement);
   ```

3. **3Dオブジェクトの生成**
   - `THREE.CylinderGeometry`: 円筒形（管路）
   - `THREE.SphereGeometry`: 球形（接続点）
   - `THREE.BoxGeometry`: 直方体（制御ボックス）

4. **インタラクション**
   - `THREE.Raycaster`: マウスとオブジェクトの交差判定
   - ホバー時のハイライト効果
   - クリック時のオブジェクト情報表示

5. **カスタムシェーダー**
   - 無限グリッドにはGLSLシェーダーを使用
   - フラグメントシェーダーとバーテックスシェーダーで動的なグリッド表示

### Reactとの統合

- `useRef`でThree.jsオブジェクトを管理
- `useEffect`でシーンの初期化とクリーンアップ
- アニメーションループは`requestAnimationFrame`で実装
- レスポンシブ対応（ウィンドウリサイズ対応）

## お問い合わせ

問題や質問がある場合は、GitHubのIssuesセクションで報告してください。

# CityJSON 3D Viewer

React と Three.js を使用した CityJSON データの 3D ビューアーアプリケーションです。

## 概要

このプロジェクトは、CityJSON 形式の都市データを 3D 空間で可視化するための Web アプリケーションです。インタラクティブな 3D シーン、レイヤー管理、パイプライン情報の表示など、複数の機能を提供します。

## 主な機能

- **3D ビューア**: Three.js を使用した CityJSON データの 3D 可視化
- **レイヤーパネル**: データレイヤーの管理と表示/非表示の切り替え
- **パイプライン情報表示**: パイプラインに関する詳細情報の表示
- **パイプライン操作**: パイプラインに対する各種アクションの実行
- **マップコンポーネント**: 2D マップビューの表示
- **スカイコンポーネント**: リアルな空の背景表示
- **無限グリッド**: 3D シーン内のグリッド表示
- **オブジェクト選択**: 3D オブジェクトのクリック選択機能
- **カメラ制御**: インタラクティブなカメラ移動と視点変更

## 技術スタック

- **React** (v18.2.0) - UI フレームワーク
- **Three.js** (v0.157.0) - 3D グラフィックスライブラリ
- **lil-gui** (v0.20.0) - GUI コントロール
- **React Scripts** (v5.0.1) - ビルドツール

## 必要要件

- Node.js (v14 以上推奨)
- npm または yarn

## インストール

1. リポジトリをクローン:
```bash
git clone <repository-url>
cd tester
```

2. 依存関係をインストール:
```bash
npm install
```

## 使用方法

### 開発サーバーの起動

```bash
npm start
```

ブラウザで [http://localhost:3000](http://localhost:3000) を開いてアプリケーションにアクセスします。

### プロダクションビルド

```bash
npm run build
```

最適化されたプロダクションビルドが `build` フォルダに生成されます。

### テストの実行

```bash
npm test
```

## プロジェクト構造

```
tester/
├── public/                          # 静的ファイル
│   ├── Cityjson_sample.json        # CityJSON サンプルデータ
│   ├── layer_panel.json            # レイヤーパネル設定
│   ├── shape_type.json             # 形状タイプ定義
│   ├── source_types.json           # ソースタイプ定義
│   ├── user_pos_1.json             # ユーザー位置データ
│   └── index.html                  # HTML テンプレート
├── src/                             # ソースコード
│   ├── components/                  # React コンポーネント
│   │   ├── InfiniteGridHelper.js   # 無限グリッドヘルパー
│   │   ├── PipelineActionButtons.js    # パイプライン操作ボタン
│   │   ├── PipelineActionButtons.css   # パイプライン操作ボタンスタイル
│   │   ├── PipelineInfoDisplay.js      # パイプライン情報表示
│   │   ├── PipelineInfoDisplay.css     # パイプライン情報スタイル
│   │   ├── Scene3D.js              # メイン 3D シーン
│   │   ├── Scene3D.css             # 3D シーンスタイル
│   │   └── SkyComponent.js         # 空背景コンポーネント
│   ├── App.js                       # メインアプリケーション
│   ├── App.css                      # アプリケーションスタイル
│   ├── ViewerApp.js                 # ビューアーレイアウト
│   ├── ViewerApp.module.css         # ビューアースタイル
│   ├── LayerPanel.js                # レイヤーパネル
│   ├── MapComponent.js              # マップコンポーネント
│   ├── index.js                     # エントリーポイント
│   └── index.css                    # グローバルスタイル
├── package.json                     # プロジェクト設定
└── README.md                        # このファイル
```

## データファイル

アプリケーションは以下の JSON ファイルを使用します：

- **Cityjson_sample.json**: CityJSON 形式の 3D 都市データ
- **layer_panel.json**: レイヤーパネルの設定情報
- **shape_type.json**: 形状タイプの定義
- **source_types.json**: データソースタイプの定義
- **user_pos_1.json**: ユーザー位置情報

## コンポーネント説明

### Scene3D
メインの 3D シーンコンポーネント。CityJSON データを Three.js を使用してレンダリングします。

### PipelineInfoDisplay
パイプラインに関する情報（距離、角度、流向など）を表示するコンポーネント。

### PipelineActionButtons
パイプラインに対する操作（追加、削除、確定など）を行うためのボタンコンポーネント。

### LayerPanel
データレイヤーの管理と表示制御を行うパネルコンポーネント。

### MapComponent
2D マップビューを提供するコンポーネント。

### SkyComponent
リアルな空の背景を表示するコンポーネント。

### InfiniteGridHelper
3D シーン内に無限グリッドを表示するヘルパーコンポーネント。

## カスタマイズ

### データの変更
`public` フォルダ内の JSON ファイルを編集することで、表示するデータをカスタマイズできます。

### スタイルの変更
各コンポーネントの CSS ファイルを編集することで、見た目をカスタマイズできます。

## トラブルシューティング

### データが読み込まれない場合
- `public` フォルダに必要な JSON ファイルがすべて存在することを確認してください
- ブラウザの開発者コンソールでエラーメッセージを確認してください

### 3D シーンが表示されない場合
- ブラウザが WebGL をサポートしていることを確認してください
- ブラウザのハードウェアアクセラレーションが有効になっていることを確認してください

## ライセンス

このプロジェクトはプライベートプロジェクトです。

## 貢献

バグ報告や機能リクエストは、issue tracker を通じてお願いします。

---

**開発者向けメモ**: このプロジェクトは React Scripts を使用しているため、設定のカスタマイズが必要な場合は `npm run eject` を実行してください（不可逆的な操作です）。